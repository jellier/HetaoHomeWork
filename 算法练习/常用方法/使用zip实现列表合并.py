# 处理二维列表的时候，用到map 和 zip

# map的作用：是根据函数对指定的序列做映射
# map(function,iterable,...)
# 返回的是个map对象，需要用next()或者转成list()来读其中的数据


a = [[1,2,3],[4,5,6],[7,8,9]]
# 列表转置，把列变为行，行变为列
b =list(map(list,zip(*a)))
print(b)
# 输出：[[1, 4, 7], [2, 5, 8], [3, 6, 9]]


c = [[4,5,6],[7,8,9],[1,2,3]]
d = list(zip(a,c))
print(d)
#打印的是：[([1, 2, 3], [4, 5, 6]), ([4, 5, 6], [7, 8, 9]), ([7, 8, 9], [1, 2, 3])]




# zip的作用：是可以接收多个可迭代对象，然后把每个可迭代对象中的第i个元素组合在一起，形成一个新的迭代器(元组)，返回的是zip对象，同样要用next()或者转成list()来读其中的数据
# 如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同。
# zip(*)函数利用 * 号操作符，可以将元组解压为列表。
# 可以理解为zip（）一种聚合，zip(*)是一种转置

var1 = '1234'
var2 = ['a','b','c','d']
var3 = ('A','B','C','D')
# 调用zip函数，组成新的元组迭代器
res = zip(var1,var2,var3)
for i in res:
    print(i)

# 输出如下：
# ('1', 'a', 'A')
# ('2', 'b', 'B')
# ('3', 'c', 'C')
# ('4', 'd', 'D')

zip2 = zip(*zip((var1,var2,var3)))
for i in zip2:
    print(i)

# 输出
# ('1234', ['a', 'b', 'c', 'd'], ('A', 'B', 'C', 'D'))